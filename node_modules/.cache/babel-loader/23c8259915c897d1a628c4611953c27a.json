{"ast":null,"code":"import firebase from \"firebase\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDL5DwmRuPCE0FhJJc0EimprhXNlDMTs5w\",\n  authDomain: \"antam-ecommerc.firebaseapp.com\",\n  databaseUrl: \"gs://antam-ecommerc.appspot.com\",\n  //Root storage URL\n  projectId: \"antam-ecommerc\",\n  storageBucket: \"antam-ecommerc.appspot.com\",\n  messagingSenderId: \"32234254939\",\n  appId: \"1:32234254939:web:e72050d49dd7b3e218857e\",\n  measurementId: \"G-YVWTN17Y0D\"\n};\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(firebaseConfig);\n} else {\n  firebase.app(); // if already initialized, use that one\n} // Using firestore\n\n\nexport const db = firebase.firestore(); // // Using Realtime\n// export const rtdb = firebase.database();\n// // Using Storage\n\nexport const storage = firebase.storage();\nexport const getList = collection => new Promise((resolve, reject) => {\n  db.collection(collection).get().then(snapshot => {\n    const result = [];\n\n    if (snapshot) {\n      snapshot.forEach(doc => {\n        const uid = doc.id;\n        const data = doc.data();\n        data[\"id\"] = uid;\n        result.push(data);\n      });\n      resolve(result);\n    }\n  }).catch(err => reject(err));\n});\nexport const getListWithOrderBy = (collection, field, type = \"asc\") => new Promise((resolve, reject) => {\n  db.collection(collection).orderBy(field, type).get().then(snapshot => {\n    const result = [];\n\n    if (snapshot) {\n      snapshot.forEach(doc => {\n        const uid = doc.id;\n        const data = doc.data();\n        data[\"id\"] = uid;\n        result.push(data);\n      });\n      resolve(result);\n    }\n  }).catch(err => reject(err));\n});\nexport const getListWithCustomField = (collection, field, value = \"\") => new Promise((resolve, reject) => {\n  db.collection(collection).where(field, \"==\", value).get().then(snapshot => {\n    const result = [];\n\n    if (snapshot) {\n      snapshot.forEach(doc => {\n        const uid = doc.id;\n        const data = doc.data();\n        data[\"id\"] = uid;\n        result.push(data);\n      });\n      resolve(result);\n    }\n  }).catch(err => reject(err));\n});\nexport const getDocById = (collection, id) => new Promise((resolve, reject) => {\n  db.collection(collection).doc(id).get().then(snapshot => {\n    const uid = snapshot.id;\n    const data = snapshot.data();\n    data[\"id\"] = uid;\n    resolve(data);\n  }).catch(err => reject(err));\n});\nexport const create = (collection, dataSubmit) => new Promise((resolve, reject) => {\n  db.collection(collection).add(dataSubmit).then(docRef => {\n    resolve(docRef.id);\n  }).catch(error => {\n    reject(`Error adding document: ${error}`);\n  });\n});\nexport const uploadSingle = (file, cb) => {\n  let uploadTask = storage.ref(`images/${file.name}`).put(file);\n  uploadTask.on(\"state_changed\", snapshot => {}, error => {\n    console.log({\n      error\n    });\n  }, async () => {\n    await storage.ref(\"images\").child(file.name).getDownloadURL().then(url => {\n      console.log(url);\n      cb(url);\n    }).catch(error => cb(error));\n  });\n};\nexport const removeById = (collection, id) => new Promise((resolve, reject) => {\n  db.collection(collection).doc(id).get().then(snapshot => {\n    snapshot.ref.delete();\n    resolve(\"success\");\n  }).catch(error => {\n    reject(`Error delete document: ${error}`);\n  });\n});\nexport const updateById = (collection, id, dataUpdate) => new Promise((resolve, reject) => {\n  db.collection(collection).doc(id).update(dataUpdate).then(snapshot => {\n    resolve(\"success\");\n  }).catch(error => {\n    reject(`Error delete document: ${error}`);\n  });\n});","map":{"version":3,"sources":["C:/Users/abc/OneDrive/Desktop/TMP/antam-ecommerc/src/app/const/firebase.js"],"names":["firebase","firebaseConfig","apiKey","authDomain","databaseUrl","projectId","storageBucket","messagingSenderId","appId","measurementId","apps","length","initializeApp","app","db","firestore","storage","getList","collection","Promise","resolve","reject","get","then","snapshot","result","forEach","doc","uid","id","data","push","catch","err","getListWithOrderBy","field","type","orderBy","getListWithCustomField","value","where","getDocById","create","dataSubmit","add","docRef","error","uploadSingle","file","cb","uploadTask","ref","name","put","on","console","log","child","getDownloadURL","url","removeById","delete","updateById","dataUpdate","update"],"mappings":"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","sourcesContent":["import firebase from \"firebase\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyDL5DwmRuPCE0FhJJc0EimprhXNlDMTs5w\",\r\n  authDomain: \"antam-ecommerc.firebaseapp.com\",\r\n  databaseUrl: \"gs://antam-ecommerc.appspot.com\", //Root storage URL\r\n  projectId: \"antam-ecommerc\",\r\n  storageBucket: \"antam-ecommerc.appspot.com\",\r\n  messagingSenderId: \"32234254939\",\r\n  appId: \"1:32234254939:web:e72050d49dd7b3e218857e\",\r\n  measurementId: \"G-YVWTN17Y0D\",\r\n};\r\n\r\nif (!firebase.apps.length) {\r\n  firebase.initializeApp(firebaseConfig);\r\n} else {\r\n  firebase.app(); // if already initialized, use that one\r\n}\r\n// Using firestore\r\nexport const db = firebase.firestore();\r\n\r\n// // Using Realtime\r\n// export const rtdb = firebase.database();\r\n\r\n// // Using Storage\r\nexport const storage = firebase.storage();\r\n\r\nexport const getList = (collection) =>\r\n  new Promise((resolve, reject) => {\r\n    db.collection(collection)\r\n      .get()\r\n      .then((snapshot) => {\r\n        const result = [];\r\n\r\n        if (snapshot) {\r\n          snapshot.forEach((doc) => {\r\n            const uid = doc.id;\r\n            const data = doc.data();\r\n\r\n            data[\"id\"] = uid;\r\n            result.push(data);\r\n          });\r\n\r\n          resolve(result);\r\n        }\r\n      })\r\n      .catch((err) => reject(err));\r\n  });\r\n\r\nexport const getListWithOrderBy = (collection, field, type = \"asc\") =>\r\n  new Promise((resolve, reject) => {\r\n    db.collection(collection)\r\n      .orderBy(field, type)\r\n      .get()\r\n      .then((snapshot) => {\r\n        const result = [];\r\n\r\n        if (snapshot) {\r\n          snapshot.forEach((doc) => {\r\n            const uid = doc.id;\r\n            const data = doc.data();\r\n\r\n            data[\"id\"] = uid;\r\n            result.push(data);\r\n          });\r\n\r\n          resolve(result);\r\n        }\r\n      })\r\n      .catch((err) => reject(err));\r\n  });\r\n\r\nexport const getListWithCustomField = (collection, field, value = \"\") =>\r\n  new Promise((resolve, reject) => {\r\n    db.collection(collection)\r\n      .where(field, \"==\", value)\r\n      .get()\r\n      .then((snapshot) => {\r\n        const result = [];\r\n\r\n        if (snapshot) {\r\n          snapshot.forEach((doc) => {\r\n            const uid = doc.id;\r\n            const data = doc.data();\r\n\r\n            data[\"id\"] = uid;\r\n            result.push(data);\r\n          });\r\n\r\n          resolve(result);\r\n        }\r\n      })\r\n      .catch((err) => reject(err));\r\n  });\r\n\r\nexport const getDocById = (collection, id) =>\r\n  new Promise((resolve, reject) => {\r\n    db.collection(collection)\r\n      .doc(id)\r\n      .get()\r\n      .then((snapshot) => {\r\n        const uid = snapshot.id;\r\n        const data = snapshot.data();\r\n\r\n        data[\"id\"] = uid;\r\n\r\n        resolve(data);\r\n      })\r\n      .catch((err) => reject(err));\r\n  });\r\n\r\nexport const create = (collection, dataSubmit) =>\r\n  new Promise((resolve, reject) => {\r\n    db.collection(collection)\r\n      .add(dataSubmit)\r\n      .then((docRef) => {\r\n        resolve(docRef.id);\r\n      })\r\n      .catch((error) => {\r\n        reject(`Error adding document: ${error}`);\r\n      });\r\n  });\r\n\r\nexport const uploadSingle = (file, cb) => {\r\n  let uploadTask = storage.ref(`images/${file.name}`).put(file);\r\n\r\n  uploadTask.on(\r\n    \"state_changed\",\r\n    (snapshot) => {},\r\n    (error) => {\r\n      console.log({ error });\r\n    },\r\n    async () => {\r\n      await storage\r\n        .ref(\"images\")\r\n        .child(file.name)\r\n        .getDownloadURL()\r\n        .then((url) => {\r\n          console.log(url);\r\n\r\n          cb(url);\r\n        })\r\n        .catch((error) => cb(error));\r\n    }\r\n  );\r\n};\r\n\r\nexport const removeById = (collection, id) =>\r\n  new Promise((resolve, reject) => {\r\n    db.collection(collection)\r\n      .doc(id)\r\n      .get()\r\n      .then((snapshot) => {\r\n        snapshot.ref.delete();\r\n\r\n        resolve(\"success\");\r\n      })\r\n      .catch((error) => {\r\n        reject(`Error delete document: ${error}`);\r\n      });\r\n  });\r\n\r\nexport const updateById = (collection, id, dataUpdate) =>\r\n  new Promise((resolve, reject) => {\r\n    db.collection(collection)\r\n      .doc(id)\r\n      .update(dataUpdate)\r\n      .then((snapshot) => {\r\n        resolve(\"success\");\r\n      })\r\n      .catch((error) => {\r\n        reject(`Error delete document: ${error}`);\r\n      });\r\n  });\r\n"]},"metadata":{},"sourceType":"module"}